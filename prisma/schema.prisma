// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  key           String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  passwordItems PasswordItem[]
  cardItems     CardItem[]
  pinItems      PinItem[]
  noteItems     NoteItem[]
}

enum VaultItemType {
  PASSWORD
  CARD
  PIN
  NOTE
}

model PasswordItem {
  id        String        @id @default(uuid())
  type      VaultItemType @default(PASSWORD)
  website   String
  username  String
  password  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  user      User          @relation(fields: [userId], references: [id])
}

model CardItem {
  id             String        @id @default(uuid())
  type           VaultItemType @default(CARD)
  cardNumber     String
  expiryDate     String
  cvv            String
  cardHolderName String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  user           User          @relation(fields: [userId], references: [id])
}

model PinItem {
  id        String        @id @default(uuid())
  type      VaultItemType @default(PIN)
  pin       String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  user      User          @relation(fields: [userId], references: [id])
}

model NoteItem {
  id        String        @id @default(uuid())
  type      VaultItemType @default(NOTE)
  note      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  user      User          @relation(fields: [userId], references: [id])
}
